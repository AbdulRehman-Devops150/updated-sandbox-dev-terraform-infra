
name: 'Terraform Deploy - Dev Sandbox'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/deploy.yml'      #  only this workflow file
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform Action'
        required: true
        default: 'plan'
        type: choice
        options: [ plan, apply ]            # destroy is manual-only via destroy.yml

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'us-east-1'
  TERRAFORM_DIR: 'environments/sandbox-dev'
  TF_VAR_force_destroy: 'true'

  # ---- Remote state backend ----
  TF_STATE_BUCKET: 'sandbox-dev-infra-tfstate-files'
  TF_STATE_KEY: 'sandbox-dev/terraform.tfstate'
  # Optional DynamoDB lock table; leave empty if not used
  TF_LOCK_TABLE: ''

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev-sandbox

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init (S3 backend)
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          set -e
          ARGS=(-reconfigure \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}")
          if [ -n "${{ env.TF_LOCK_TABLE }}" ]; then
            ARGS+=(-backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}")
          fi
          terraform init "${ARGS[@]}"

      - name: Terraform Format Check
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('${{ env.TERRAFORM_DIR }}/plan.txt', 'utf8');
            const output = plan.length > 65000 ? plan.substring(0, 65000) + '...(truncated)' : plan;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${output}
            \`\`\`

            </details>`
            });

      - name: Terraform Apply
        if: |
          (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Output Results
        if: github.event_name != 'pull_request'
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "## Terraform ${{ github.event.inputs.action || 'apply' }} Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Resources deployed successfully" >> $GITHUB_STEP_SUMMARY
          if terraform output >/dev/null 2>&1; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
            terraform output >> $GITHUB_STEP_SUMMARY
          fi
